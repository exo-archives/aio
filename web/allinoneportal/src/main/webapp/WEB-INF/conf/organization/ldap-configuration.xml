<?xml version="1.0" encoding="ISO-8859-1"?>
<configuration>
  <component>
    <key>org.exoplatform.services.ldap.LDAPService</key>
    <type>org.exoplatform.services.ldap.impl.LDAPServiceImpl</type>
    <init-params>
      <object-param>
        <name>ldap.config</name>
        <description>Default ldap config</description>
        <object type="org.exoplatform.services.ldap.impl.LDAPConnectionConfig">
          <!-- providerURL: LDAP server URL
          for multiple ldap servers, use comma seperated list of host:port (Ex. ldap://127.0.0.1:389,10.0.0.1:389) -->
          <field name="providerURL"><string>ldap://127.0.0.1:389,10.0.0.1:389</string></field>
          
          <!-- rootdn: dn of user that will be used to by the service to authenticate on the service -->
          <field name="rootdn"><string>CN=Manager,DC=exoplatform,DC=org</string></field>
          
          <!-- password for user {rootdn} -->
          <field name="password"><string>secret</string></field>
          
          <!-- authenticationType: type of authentication to be used.
               One of none, simple, strong. Default is simple -->
          <!-- field  name="authenTicationType"><string>simple</string></field-->           
          
           <!-- version :  LDAP protocol version -->
          <field name="version"><string>3</string></field>
                              
          <!-- referalMode: one of follow,ignore,throw --> 	    	    
          <field  name="referralMode"><string>follow</string></field>      	    

          <!--serverName: set to 'active.directory' for Active Directory, others will behave as standard LDAP -->  
          <!-- field  name="serverName"><string>active.directory</string></field-->
        </object>
      </object-param>
    </init-params>
  </component>
  <component>
    <key>org.exoplatform.services.organization.OrganizationService</key>
    <type>org.exoplatform.services.organization.ldap.OrganizationServiceImpl</type>
    <component-plugins>
      <component-plugin>
        <name>init.service.listener</name>
        <set-method>addListenerPlugin</set-method>
        <type>org.exoplatform.services.organization.ldap.OrganizationLdapInitializer</type>
        <description>this listener populate organization ldap service create default dn</description>
      </component-plugin>
    </component-plugins>
    <init-params>
      <value-param>
        <name>ldap.userDN.key</name>
        <description>The key used to compose user DN</description>
        <value>cn</value>
      </value-param>
      <object-param>
        <name>ldap.attribute.mapping</name>
        <description>ldap attribute mapping</description>
        <object type="org.exoplatform.services.organization.ldap.LDAPAttributeMapping">

<!-- 
eXo organizational model has User,Group,Membership and Profile entities.
For each, we define a base dn. At startup if one of {userURL}, {groupsURL}, {membershipTypeURL} or {profileURL} 
does not exist fully, the missing subtree is created by following the rules :
 - ou=xyz >> objectClass=top,objectClass=organizationalUnit
 - cn=xyz >> objectClass=top,objectClass=organizationalRole
 - c=xyz >> objectClass=country
 - o=xyz >> objectClass=organization
 - dc=xyz >> objectClass=top,objectClass=dcObject,objectClass=organization
 
Example:  
 if {baseURL} is o=MyCompany,c=com and {groupsURL} is dc=groups,cn=Extranet,c=France,ou=EMEA,o=MyCompany,c=com
 then, The following subtree will be created : 
  ou=EMEA,o=MyCompany,c=com
    objectClass: top
    objectClass: organizationalUnit
    ...
    c=France,ou=EMEA,o=MyCompany,c=com
      objectClass: top
      objectClass: country
      ...
      cn=Extranet,c=France,ou=EMEA,o=MyCompany,c=com
        objectClass: top
        objectClass: organizationalRole
        ...
          dc=groups,cn=Extranet,c=France,ou=EMEA,o=MyCompany,c=com
            objectClass: top
            objectClass: dcObject
            objectClass: organization            
            ...

-->          
        
         <!-- baseURL: root dn for eXo organizational entities. This entry can't be created by eXo and must preexist in directory. --> 
         <field name="baseURL"><string>dc=exoplatform,dc=org</string></field>

           <!-- ldapDescriptionAttr : Name of a common attribute that will be used as label users, groups et profiles -->
          <field name="ldapDescriptionAttr"><string>description</string></field>
 
 
          <!-- ///////// USERS /////////-->
          <!--  
            userURL : base dn for users.
            Users are created in a flat structure under this base with a dn of the form: 
            
                         {ldap.userDN.key}={username},{userURL}
                         
            Example : uid=john,cn=People,o=MyCompany,c=com
            
            However if users exist deeply under {userURL}, eXo will be able to retrieve them.

            Example : uid=tom,ou=France,ou=EMEA,cn=People,o=MyCompany,c=com
           -->
          <field name="userURL"><string>ou=users,ou=portal,dc=exoplatform,dc=org</string></field>

          <!-- 
            userObjectClassFilter: Filter used under {userURL} branch to distinguish eXo user entries from others.
          
            Example : In the following user subtree : 
            
            uid=john,cn=People,o=MyCompany,c=com
              objectClass: person        
              ...        
                ou=EMEA,cn=People,o=MyCompany,c=com
                  objectClass: organizationalUnit
                  ...
                    ou=France,ou=EMEA,cn=People,o=MyCompany,c=com
                      objectClass: organizationalUnit
                      ...
                        uid=tom,ou=EMEA,cn=People,o=MyCompany,c=com
                          objectClass: person
                          ...
           
            'john' and 'tom' will be recognized as valid eXo users.
            'EMEA' and 'France' entries will be ignored.
          -->
          <field name="userObjectClassFilter"><string>objectClass=person</string></field>

          <!-- 
            user mapping : maps ldap attributes to eXo User objects attributes 
          -->     

          <!-- userUsernameAttr : username (login) -->
          <field  name="userUsernameAttr"><string>uid</string></field>

          <!-- userPassword: password (used when portal authentication is done by eXo login module -->
          <field  name="userPassword"><string>userPassword</string></field>

          <!--  userFirstNameAttr: firstname -->
          <field  name="userFirstNameAttr"><string>givenName</string></field>

          <!--  userLastNameAttr: lastname -->
          <field  name="userLastNameAttr"><string>sn</string></field>          

          <!--  userDisplayNameAttr: displayed name -->
          <field  name="userDisplayNameAttr"><string>displayName</string></field>

          <!--  userMailAttr: email address -->
          <field  name="userMailAttr"><string>mail</string></field>

          <!-- end of user mapping -->   


          <!-- 
            userLDAPClasses : comma separated list of classes used for user creation.
            When creating a new user, an entry will be created with the given objectClass attributes.
            The classes must at least define cn + any attribute found in the user mapping.
            
            Example : Adding the user 'Marry Simons' could produce :
                        
              uid=marry,cn=users,ou=portal,dc=exoplatform,dc=org
                objectclass: top
                objectClass: person
                objectClass: organizationalPerson
                objectClass: inetOrgPerson
                uid: marry
                userPassword: XXXX
                givenName: Marry
                sn: Simons
                displayName: Marry Simons
                mail: marry.simons@example.org
          -->          
          <field name="userLDAPClasses"><string>top,person,organizationalPerson,inetOrgPerson</string></field>
                    

          <!-- //////// GROUPS //////////// -->
          <!-- 
            eXo groups can be mapped to organizational or applicative groups. 
            They can be structured hierarchically.            
            
            Example: Groups communication, communication/marketing and communication/press would map to
            
            ou=communication,ou=groups,ou=portal,dc=exoplatform,dc=org
              ou=marketing,ou=communication,ou=groups,ou=portal,dc=exoplatform,dc=org
              ou=press,ou=communication,ou=groups,ou=portal,dc=exoplatform,dc=org                          
          -->
          
          <!--
           groupsURL : base dn for eXo groups
          -->
          <field name="groupsURL"><string>ou=groups,ou=portal,dc=exoplatform,dc=org</string></field>
          
          <!-- 
            groupLDAPClasses: comma separated list of classes used for group creation. 
            When creating a new group, an entry will be created with the given objectClass attributes.
            The classes must define at least the required attributes: ou,description,l    
                        
            Example : Adding the group 'human-resources' could produce: 
                        
              ou=human-resources,ou=groups,ou=portal,dc=exoplatform,dc=org
                objectclass: top
                objectClass: organizationalunit
                ou: human-resources
                description: The human resources department
                l: Human Resources
                ...            
          -->          
          <field name="groupLDAPClasses"><string>top,organizationalUnit</string></field>
          
           <!-- 
            groupObjectClassFilter: filter used under {groupsURL} branch to distinguish eXo groups from other entries.
            You can also use a complex filter if you need.
            
            Example : 
            
            l=Paris,dc=sites,dc=mycompany,dc=com
              ou=WebDesign,l=Paris,dc=sites,dc=mycompany,dc=com
                ou=Graphists,WebDesign,l=Paris,dc=sites,dc=mycompany,dc=com
            l=London,dc=sites,dc=mycompany,dc=com
              ou=Sales,l=London,dc=sites,dc=mycompany,dc=com
            
            Would retrieve the groups WebDesign, WebDesign/Graphists, Sales              
           -->
          <field name="groupObjectClassFilter"><string>objectClass=organizationalUnit</string></field>
          

          <!-- /////////// MEMBERSHIP TYPES ///////////// -->
          <!-- Membership types are the possible roles that can be assigned to users in groups. -->
          
          <!-- 
           membershipTypeURL : base dn for membership types storage.
           eXo stores membership types in a flat structure under {membershipTypeURL}.             
           
           Example : The subtree : 
           
             ou=roles,ou=portal,dc=exoplatform,dc=org
               cn=manager,ou=roles,ou=portal,dc=exoplatform,dc=org
               cn=user,ou=roles,ou=portal,dc=exoplatform,dc=org
               cn=admin,ou=roles,ou=portal,dc=exoplatform,dc=org               
               cn=editor,ou=roles,ou=portal,dc=exoplatform,dc=org
               
           Defines the roles : manager,user,admin,editor
          -->
          <field name="membershipTypeURL">
            <string>ou=memberships,ou=portal,dc=exoplatform,dc=org</string>
          </field>          
          
          <!-- 
            membershipTypeLDAPClasses: comma separated list of classes for membership types creation. 
            When creating a new membership type, an entry will be created with the given objectClass attributes.
            The classes must define the required attributes : description, cn 
          
            Example : Adding membership type 'validator' would produce : 
            
              cn=validator,ou=roles,ou=portal,dc=exoplatform,dc=org
                objectclass: top
                objectClass: organizationalRole
                ...                       
          -->          
          <field name="membershipTypeLDAPClasses"><string>top,organizationalRole</string></field>

          <!-- 
          membershipTypeNameAttr : Attribute that will be used as the name of the role
          
          Example : If {membershipTypeNameAttr} is 'cn',  then in the entry :
          
          cn=manager,ou=roles,ou=portal,dc=exoplatform,dc=org
          
          the name of the role is 'manager'
           -->
          <field name="membershipTypeNameAttr"><string>cn</string></field>
          
          

          <!-- /////////// MEMBERSHIPS ///////////// -->
          <!-- 
            Memberships are used to assign a role within a group.
            They are entries that are placed under the group entry of their scope group
            Users in this role are defined as attributes of the membership entry.
            
            Example: To designate 'tom' as the 'manager' of the group "human-resources" : 
            
            ou=human-resources,ou=groups,ou=portal,dc=exoplatform,dc=org
             ...
              cn=manager,ou=human-resources,ou=groups,ou=portal,dc=exoplatform,dc=org
                member: uid=tom,ou=users,ou=portal,dc=exoplatform,dc=org
                ...                
           -->
           
          <!-- 
            membershipLDAPClasses : comma separated list of classes used to create memberships 
            When creating a new membership, an entry will be created with the given objectClass attributes.
            The classes must at least define the attribute designated by {membershipTypeMemberValue}.
          
            Example : Adding membership 'validator' would produce : 
            
              cn=validator,ou=human-resources,ou=groups,ou=portal,dc=exoplatform,dc=org
                objectclass: top
                objectClass: groupOfNames
                ...
           -->                     
          <field name="membershipLDAPClasses"><string>top,groupOfNames</string></field>
          
          
          
          <!-- 
            membershipTypeMemberValue: Multivalued attribute used in memberships to reference
            users that have the role in the group. Values should be user dn.

            Example: james and root have admin role within the dans le group human-resources, would give:

            cn=admin,ou=human-resources,ou=groups,ou=portal,dc=exoplatform,dc=org
              member: cn=james,ou=users,ou=portal,dc=exoplatform,dc=org
              member: cn=root,ou=users,ou=portal,dc=exoplatform,dc=org
          -->                              
          <field name="membershipTypeMemberValue"><string>member</string></field>                              
                     
          <!-- 
            membershipTypeRoleNameAttr: Attribute of the membership entry whose value references the membership typ.
            
            Example : Within membership :
            
            cn=manager,ou=human-resources,ou=groups,ou=portal,dc=exoplatform,dc=org
          
            'cn' attribute is used to designate the 'manager' membership type
            Which could also be said : the name of the role is given by 'cn' the attribute. 
           -->
          <field name="membershipTypeRoleNameAttr"><string>cn</string></field>
          
          <!-- 
            membershipTypeObjectClassFilter : Filter used to distinguish membership entries under groups.
            You can use rather complex filters.
            
            Example: 
            
            (&amp;(objectClass=ExoMembership)(membershipURL=*)) 
            
            is a filter we used for a customer that needed to trigger a dynlist overlay on openldap.
            Notice the the escaping of the  '&' (and) operator
          -->                              
          <field name="membershipTypeObjectClassFilter">
            <string>objectClass=organizationalRole</string>
          </field>

          <!-- /////////////// PROFILES ///////////////// -->

          <!-- User profiles have entries in the ldap but the actual storage is still done with the hibernate service -->

          <!-- profileURL: base dn to store user profiles -->
          <field name="profileURL"><string>ou=profiles,ou=portal,dc=exoplatform,dc=org</string></field>

          <!--  profileLDAPClasses : Classes used to when creating user profiles -->
          <field name="profileLDAPClasses"><string>top,organizationalPerson</string></field>

 
        </object>
      </object-param>
    </init-params>
  </component>
  <external-component-plugins>
    <target-component>org.exoplatform.services.database.HibernateService</target-component>
    <component-plugin>
      <name>add.hibernate.mapping</name>
      <set-method>addPlugin</set-method>
      <type>org.exoplatform.services.database.impl.AddHibernateMappingPlugin</type>
      <init-params>
        <values-param>
          <name>hibernate.mapping</name>
          <value>org/exoplatform/services/organization/impl/UserProfileData.hbm.xml</value>
        </values-param>
      </init-params>
    </component-plugin>
  </external-component-plugins>
  <!-- for ldap clean database 
    <external-component-plugins>
    <target-component>org.exoplatform.services.ldap.LDAPService</target-component>
    <component-plugin> 
    <name>delete.object</name>
    <set-method>addDeleteObject</set-method>
    <type>org.exoplatform.services.ldap.DeleteObjectCommand</type>
    <init-params>
    <values-param>
    <name>objects.to.delete</name>
    <value>cn=demo,ou=users,ou=portal,dc=exoplatform,dc=org</value>
    <value>cn=test,ou=users,ou=portal,dc=exoplatform,dc=org</value>
    <value>cn=Benj,ou=users,ou=portal,dc=exoplatform,dc=org</value>
    <value>cn=tuan,ou=users,ou=portal,dc=exoplatform,dc=org</value>
    </values-param>
    </init-params>
    </component-plugin>
    </external-component-plugins>
  -->
</configuration>
